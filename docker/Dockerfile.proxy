# Forked from https://github.com/BirgerK/docker-apache-letsencrypt
FROM phusion/baseimage:bionic-1.0.0
MAINTAINER Eric Jacolin <eric.jacolin@free.fr>

ENV DEBIAN_FRONTEND noninteractive

# Letsencrypt environment variables
ENV LETSENCRYPT_HOME /etc/letsencrypt
ARG WEBMASTER_MAIL
ENV WEBMASTER_MAIL $WEBMASTER_MAIL
ARG LETSENCRYPT_BUCKET
ENV LETSENCRYPT_BUCKET $LETSENCRYPT_BUCKET

# Build environment (local|remote)
ARG HOST_ENV
ENV HOST_ENV $HOST_ENV

# Arguments to build configuration files with dockerize
ARG PHP_DISPLAY_ERRORS
ENV PHP_DISPLAY_ERRORS $PHP_DISPLAY_ERRORS
ARG PHP_ERROR_REPORTING
ENV PHP_ERROR_REPORTING $PHP_ERROR_REPORTING
ARG SMTP_ACCOUNT
ENV SMTP_ACCOUNT $SMTP_ACCOUNT

# Manually set the apache environment variables in order to get apache to work immediately.
RUN echo $WEBMASTER_MAIL > /etc/container_environment/WEBMASTER_MAIL && \
    echo $LETSENCRYPT_HOME > /etc/container_environment/LETSENCRYPT_HOME

# Apache, PHP, LetsEncrypt, msmtp
RUN apt-get -y update && \
    apt-get install -q -y \
        apache2 \
        libapache2-mod-security2 \
        curl \
        msmtp \
        msmtp-mta \
        nano \
        software-properties-common \
        wget && \
    # PHP modules
    add-apt-repository ppa:ondrej/php && \
    apt-get update && \
    apt-get install -q -y \
        php7.4 \
        libapache2-mod-php \
        php-apcu \
        php7.4-cli \
        php7.4-curl \
        php7.4-gd \
        php7.4-intl \
        php7.4-mbstring \
        php7.4-mysql \
        php7.4-sqlite3 \
        php7.4-xml \
        php-yaml \
        php7.4-zip && \
    # Certbot
    add-apt-repository ppa:certbot/certbot && \
    apt-get -y update && \
    apt-get install -q -y \
        apt-transport-https \
        ca-certificates gnupg \
        python-certbot-apache

# Install gsutil
RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg  add - && apt-get update -y && apt-get install google-cloud-sdk -y

# Install Dockerize
RUN curl -sfL https://github.com/powerman/dockerize/releases/download/v0.10.0/dockerize-`uname -s`-`uname -m` \
    | install /dev/stdin /usr/local/bin/dockerize

# Clean up
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Configure apache
ADD config/mods-available/proxy_html.conf /etc/apache2/mods-available/
ADD config/conf-available/* /etc/apache2/conf-available/
ADD config/sites-enabled.${HOST_ENV}/* /etc/apache2/sites-enabled/
ADD --chown=www-data:www-data www /var/www/
# ModSecurity module (WAF)
RUN mv /etc/modsecurity/modsecurity.conf-recommended /etc/modsecurity/modsecurity.conf \
    && sed -i \
        -e 's|SecRuleEngine DetectionOnly|SecRuleEngine On|g' \
        -e 's|SecAuditLogParts ABDEFHIJZ|SecAuditLogParts ABDEFHIJZ|g' \
        /etc/modsecurity/modsecurity.conf \
    && wget https://github.com/coreruleset/coreruleset/archive/v3.3.0.tar.gz \
    && tar xvf v3.3.0.tar.gz \
    && mkdir /etc/apache2/modsecurity-crs/ \
    && mv coreruleset-3.3.0/ /etc/apache2/modsecurity-crs/ \
    && mv /etc/apache2/modsecurity-crs/coreruleset-3.3.0/crs-setup.conf.example \
            /etc/apache2/modsecurity-crs/coreruleset-3.3.0/crs-setup.conf \
    && export STR_FROM='IncludeOptional /usr/share/modsecurity-crs/owasp-crs.load' \
    && export STR_TO='IncludeOptional /etc/apache2/modsecurity-crs/coreruleset-3.3.0/crs-setup.conf\nIncludeOptional /etc/apache2/modsecurity-crs/coreruleset-3.3.0/rules/\*.conf' \
    && sed -i "s|${STR_FROM}|${STR_TO}|g" /etc/apache2/mods-available/security2.conf
RUN a2enmod \
        headers \
        proxy \
        proxy_http \
        proxy_html \
        remoteip \
        rewrite \
        security2 \
        ssl \
        usertrack \
        xml2enc \
    && a2enconf \
        hostname \
        letsencrypt \
        ssl-params \
    && a2dissite \
        000-default \
        default-ssl \
    && mkdir -p /var/lock/apache2 \
    && mkdir -p /var/run/apache2

# Configure PHP for Apache & CLI
COPY config/php/php.ini.tpl /etc/php/7.4/apache2/php.ini.tpl
COPY config/php/php.ini.tpl /etc/php/7.4/cli/php.ini.tpl

# Desired PHP CLI version
RUN update-alternatives --set php /usr/bin/php7.4

# Configure MSMTP
COPY config/msmtp/msmtprc.tpl /etc/msmtprc.tpl
COPY config/msmtp/msmtp.logrotate /etc/logrotate.d/msmtp
RUN mkdir -p /var/log/msmtp

# Configure LetsEncrypt
COPY config/le/cli.ini /etc/letsencrypt/cli.ini

# Configure runit
RUN mkdir -p /etc/service/apache
ADD config/scripts/run_apache.sh /etc/service/apache/run

# Init scripts:
# Run Dockerize
ADD config/scripts/10-dockerize.sh /etc/my_init.d/
# Fetch /etc/letsencrypt from bucket
ADD config/scripts/20-fetch_letsencrypt.sh /etc/my_init.d/

# Other non-init scripts:
# Daily cron job to archive /etc/letsencrypt to Cloud Storage
# Must hard code environment variables, only way to make them accessible to cron
ADD config/scripts/bkp_letsencrypt.sh /bkp_letsencrypt.sh
RUN echo "SHELL=/bin/bash\n0 0 * * * root HOST_ENV=$HOST_ENV LETSENCRYPT_BUCKET=$LETSENCRYPT_BUCKET /bkp_letsencrypt.sh\n" > /etc/cron.d/bkp_letsencrypt

# Application cron jobs
ADD config/scripts/app-cron-jobs /etc/cron.d/app-cron-jobs

# Make scripts executable
RUN chmod +x /*.sh && chmod +x /etc/my_init.d/*.sh && chmod +x /etc/service/apache/*

CMD ["/sbin/my_init"]
